services:
  eureka-server:
    build:
      context: ./server-registry
    image: rialfield/eureka-server:latest
    restart: unless-stopped
    container_name: server-registry
    ports:
      - "8761:8761"
    environment:
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 300m
    networks:
      - backend

  user-db:
    image: postgres:15
    restart: unless-stopped
    container_name: user-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 250m
    volumes:
      - user-db-data:/var/lib/postgresql/data
      - ./user-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
    image: rialfield/user-service:latest
    restart: unless-stopped
    container_name: user-service
    depends_on:
      - user-db
      - kafka
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      USER_SERVICE_DB_HOST: ${USER_SERVICE_DB_HOST}
      USER_SERVICE_DB_PORT: ${USER_SERVICE_DB_PORT}
      USER_SERVICE_DB_NAME: ${USER_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      _JAVA_OPTIONS: "-Xms256m -Xmx350m"
    mem_limit: 350m
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    restart: unless-stopped
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      JVMFLAGS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    restart: unless-stopped
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9081:9081"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9080,PLAINTEXT_LOCAL://localhost:9081
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9080,PLAINTEXT_LOCAL://0.0.0.0:9081
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xms128m -Xmx256m"
    mem_limit: 300m
    networks:
      - backend
    command: >
      bash -c "rm -rf /var/lib/kafka/data/* && /etc/confluent/docker/run"

  redis:
    image: redis:7.2
    restart: unless-stopped
    container_name: redis
    ports:
      - "6379:6379"
    mem_limit: 150m
    volumes:
      - redis-data:/data
    networks:
      - backend

  team-db:
    image: postgres:15
    restart: unless-stopped
    container_name: team-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${TEAM_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - team-db-data:/var/lib/postgresql/data
      - ./team-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  team-service:
    build:
      context: ./team-service
    image: rialfield/team-service:latest
    restart: unless-stopped
    container_name: team-service
    depends_on:
      - team-db
      - kafka
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      TEAM_SERVICE_DB_HOST: ${TEAM_SERVICE_DB_HOST}
      TEAM_SERVICE_DB_PORT: ${TEAM_SERVICE_DB_PORT}
      TEAM_SERVICE_DB_NAME: ${TEAM_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  plan-db:
    image: postgres:15
    restart: unless-stopped
    container_name: plan-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: ${PLAN_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - plan-db-data:/var/lib/postgresql/data
      - ./plan-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  plan-service:
    build:
      context: ./plan-service
    image: rialfield/plan-service:latest
    restart: unless-stopped
    container_name: plan-service
    depends_on:
      - plan-db
      - kafka
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      PLAN_SERVICE_DB_HOST: ${PLAN_SERVICE_DB_HOST}
      PLAN_SERVICE_DB_PORT: ${PLAN_SERVICE_DB_PORT}
      PLAN_SERVICE_DB_NAME: ${PLAN_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  notification-db:
    image: postgres:15
    restart: unless-stopped
    container_name: notification-db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: ${NOTIFICATION_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - notification-db-data:/var/lib/postgresql/data
      - ./notification-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  notification-service:
    build:
      context: ./notification-service
    image: rialfield/notification-service:latest
    restart: unless-stopped
    container_name: notification-service
    depends_on:
      - notification-db
      - kafka
      - eureka-server
      - user-service
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      NOTIFICATION_SERVICE_DB_HOST: ${NOTIFICATION_SERVICE_DB_HOST}
      NOTIFICATION_SERVICE_DB_PORT: ${NOTIFICATION_SERVICE_DB_PORT}
      NOTIFICATION_SERVICE_DB_NAME: ${NOTIFICATION_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  document-db:
    image: postgres:15
    restart: unless-stopped
    container_name: document-db
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: ${DOCUMENT_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - document-db-data:/var/lib/postgresql/data
      - ./document-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  document-service:
    build:
      context: ./document-service
    image: rialfield/document-service:latest
    restart: unless-stopped
    container_name: document-service
    depends_on:
      - document-db
      - kafka
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      DOCUMENT_SERVICE_DB_HOST: ${DOCUMENT_SERVICE_DB_HOST}
      DOCUMENT_SERVICE_DB_PORT: ${DOCUMENT_SERVICE_DB_PORT}
      DOCUMENT_SERVICE_DB_NAME: ${DOCUMENT_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CLOUDINARY_URL: ${CLOUDINARY_URL}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  session-db:
    image: postgres:15
    restart: unless-stopped
    container_name: session-db
    ports:
      - "5437:5432"
    environment:
      POSTGRES_DB: ${SESSION_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - session-db-data:/var/lib/postgresql/data
      - ./session-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  session-service:
    build:
      context: ./session-service
    image: rialfield/session-service:latest
    restart: unless-stopped
    container_name: session-service
    depends_on:
      - session-db
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SESSION_SERVICE_DB_HOST: ${SESSION_SERVICE_DB_HOST}
      SESSION_SERVICE_DB_PORT: ${SESSION_SERVICE_DB_PORT}
      SESSION_SERVICE_DB_NAME: ${SESSION_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  chat-db:
    image: postgres:15
    restart: unless-stopped
    container_name: chat-db
    ports:
      - "5438:5432"
    environment:
      POSTGRES_DB: ${CHAT_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - chat-db-data:/var/lib/postgresql/data
      - ./chat-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  chat-service:
    build:
      context: ./chat-service
    image: rialfield/chat-service:latest
    restart: unless-stopped
    container_name: chat-service
    ports:
      - "8086:8086"
    depends_on:
      - chat-db
      - kafka
      - eureka-server
      - user-service
      - team-service
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CHAT_SERVICE_DB_HOST: ${CHAT_SERVICE_DB_HOST}
      CHAT_SERVICE_DB_PORT: ${CHAT_SERVICE_DB_PORT}
      CHAT_SERVICE_DB_NAME: ${CHAT_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CLOUDINARY_URL: ${CLOUDINARY_URL}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  auth-db:
    image: postgres:15
    restart: unless-stopped
    container_name: auth-db
    ports:
      - "5439:5432"
    environment:
      POSTGRES_DB: ${AUTH_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 200m
    volumes:
      - auth-db-data:/var/lib/postgresql/data
      - ./auth-service/src/main/resources/database:/docker-entrypoint-initdb.d
    networks:
      - backend

  auth-service:
    build:
      context: ./auth-service
    image: rialfield/auth-service:latest
    restart: unless-stopped
    container_name: auth-service
    depends_on:
      - auth-db
      - redis
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      AUTH_SERVICE_DB_HOST: ${AUTH_SERVICE_DB_HOST}
      AUTH_SERVICE_DB_PORT: ${AUTH_SERVICE_DB_PORT}
      AUTH_SERVICE_DB_NAME: ${AUTH_SERVICE_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 250m
    networks:
      - backend

  api-gateway:
    build:
      context: ./api-gateway
    image: rialfield/api-gateway:latest
    restart: unless-stopped
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - team-service
      - session-service
      - plan-service
      - document-service
      - chat-service
      - notification-service
      - auth-service
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CLOUDINARY_URL: ${CLOUDINARY_URL}
      _JAVA_OPTIONS: "-Xms128m -Xmx256m"
    mem_limit: 300m
    networks:
      - backend

volumes:
  user-db-data:
  team-db-data:
  plan-db-data:
  notification-db-data:
  document-db-data:
  session-db-data:
  chat-db-data:
  redis-data:
  auth-db-data:

networks:
  backend:
    driver: bridge
